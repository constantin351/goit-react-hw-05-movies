{"version":3,"file":"static/js/857.189b3db3.chunk.js","mappings":"2LACA,EAAuB,yBAAvB,EAA4D,8B,SCwB5D,EArBmB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAClBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAaC,UAAWC,EAAxB,UACE,SAAC,KAAD,CACED,UAAWC,EACXC,GAAE,kBAAaN,GACfO,MAAO,CAAEC,KAAMN,GAHjB,SAKGD,KANID,EAUZ,ECjBD,EAAwB,0BCiCxB,EA7BmB,SAAC,GAAgB,IAAdS,EAAa,EAAbA,OACdP,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BAEyB,MAAtBD,EAASQ,WACR,eAAIN,UAAWC,EAAf,SAA0B,oBAG5B,wBACGI,EAAOE,KAAI,SAAAC,GAAK,OACf,SAAC,EAAD,CAA2BZ,GAAIY,EAAMZ,GAAIC,KAAMW,EAAMC,OAApCD,EAAMZ,GADR,QAOxB,C,uJChBKc,EAAoB,mCAAG,WAAOC,GAAP,0FACnBC,EAAAA,EAAAA,IAAA,UAJM,gCAIN,gCAHM,mCAGN,kBAA6DD,EAA7D,aADmB,2CAAH,sDAI1B,ICVA,EAA4B,6BAA5B,EAAsE,8BAAtE,EAAwH,qCAAxH,EAAgL,oC,SC4DhL,EAtDkB,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,gBACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACML,EAAQI,EAAaE,IAAI,UAG/BC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,+GAEyBR,EAAqBC,GAF9C,OAEUQ,EAFV,OAGUC,EAAYD,EAAOE,KAAKC,QAE9BT,EAAgBO,GALpB,gDAQIG,QAAQC,IAAR,MARJ,0DALc,sBACA,KAAVb,GAA0B,OAAVA,GADN,mCAGdc,EAaD,GAAE,CAACZ,EAAiBF,IAUrB,OACE,gBAAKX,UAAWC,EAAhB,UACE,kBAAMyB,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfd,EAAgB,CAAEL,MAAOkB,EAAKE,SAASpB,MAAMqB,QAE7CH,EAAKI,OACN,EAIiCjC,UAAWC,EAAzC,WACE,kBACEiC,KAAK,OACLrC,KAAK,QACLG,UAAWC,EACXkC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQH,KAAK,SAASlC,UAAWC,EAAjC,UACE,SAAC,MAAD,CAAUqC,KAAM,WAKzB,ECQD,EAxDmB,WACjB,OAAsCC,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAyCA,OACE,iCACE,SAAC,EAAD,CAAW5B,gBANS,SAAAO,GACtBqB,EAAerB,EAChB,IAWIoB,IAAe,SAACE,EAAA,EAAD,CAAYrC,OAAQmC,MAGzC,C","sources":["webpack://react-homework-template/./src/components/MoviesItem/MoviesItem.module.css?58c2","components/MoviesItem/MoviesItem.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","api/fetchMoviesWithQuery.js","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesItem_item__jqTBO\",\"item_link\":\"MoviesItem_item_link__vD+7s\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesItem.module.css';\n\nconst MoviesItem = ({ id, name }) => {\n  const location = useLocation();\n\n  return (\n    <li key={id} className={css.item}>\n      <Link\n        className={css.item_link}\n        to={`/movies/${id}`}\n        state={{ from: location }}\n      >\n        {name}\n      </Link>\n    </li>\n  );\n};\n\nMoviesItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default MoviesItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MoviesList_title__PB2c8\"};","import PropTypes from 'prop-types';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\nimport css from './MoviesList.module.css';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <main>\n      \n      {location.pathname === '/' && (\n        <h1 className={css.title}>Trending today</h1>\n      )}\n\n      <ul>\n        {movies.map(movie => (\n          <MoviesItem key={movie.id} id={movie.id} name={movie.title} />\n        ))}\n      </ul>\n      \n    </main>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import axios from \"axios\";\n\n// https://api.themoviedb.org/3/search/movie?api_key=ae92408bde877ec931a5ff6e9d752bd2&language=en-US&page=1&include_adult=false === поиск\n\nconst baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"ae92408bde877ec931a5ff6e9d752bd2\";\n\nconst fetchMoviesWithQuery = async (query) => {\n   return axios.get(`${baseURL}search/movie?api_key=${API_KEY}&query=${query}&page=1`);\n};\n\nexport default fetchMoviesWithQuery;","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"SearchBar_Searchbar__qe5Sc\",\"SearchForm\":\"SearchBar_SearchForm__J+i1a\",\"SearchForm_button\":\"SearchBar_SearchForm_button__WJfDq\",\"SearchForm_input\":\"SearchBar_SearchForm_input__-FIrC\"};","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FiSearch } from 'react-icons/fi';\nimport fetchMoviesWithQuery from 'api/fetchMoviesWithQuery';\nimport css from './SearchBar.module.css';\n\nconst SearchBar = ({ onSubmitHandler }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  //\n  \n  useEffect(() => {\n    if (query === '' || query === null) return;\n    // if (query) fetchMovies();\n    fetchMovies();\n\n    async function fetchMovies() {\n      try {\n        const result = await fetchMoviesWithQuery(query);\n        const moviesArr = result.data.results;\n        // setMoviesFound(moviesArr);\n        onSubmitHandler(moviesArr);\n      } catch (error) {\n        // setError(error);\n        console.log(error);\n      }\n    }\n  }, [onSubmitHandler, query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    // setMoviesFound([]);\n    form.reset();\n  };\n\n  return (\n    <div className={css.Searchbar}>\n      <form onSubmit={handleSubmit} className={css.SearchForm}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          className={css.SearchForm_input}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\" className={css.SearchForm_button}>\n          <FiSearch size={28} />\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmitHandler: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { useState } from 'react';\n// import { fetchMoviesWithQuery } from 'api/fetchMoviesWithQuery';\n// import { useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\n//\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nconst MoviesPage = () => {\n  const [moviesFound, setMoviesFound] = useState(null);\n  // const [error, setError] = useState(null);\n\n  // const [searchParams, setSearchParams] = useSearchParams();\n  // const query = searchParams.get('query');\n  // //\n  // useEffect(() => {\n  //   if (query === '' || query === null) return;\n  //   // if (query) fetchMovies();\n  //   fetchMovies();\n\n  //   async function fetchMovies() {\n  //     try {\n  //       const result = await fetchMoviesWithQuery(query);\n  //       const moviesArr = result.data.results;\n  //       console.log('moviesArr', moviesArr);\n  //       setMoviesFound(moviesArr);\n  //     } catch (error) {\n  //       // setError(error);\n  //       console.log('error', error);\n  //     }\n  //   }\n  // }, [query]);\n\n  // console.log('query', query);\n\n  // console.log('moviesFound', moviesFound);\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   setSearchParams({ query: form.elements.query.value });\n  //   // setMoviesFound([]);\n\n  //   form.reset();\n  // };\n  //\n  const onSubmitHandler = moviesArr => {\n    setMoviesFound(moviesArr);\n  };\n  //\n  return (\n    <>\n      <SearchBar onSubmitHandler={onSubmitHandler} />\n\n      {/* <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form> */}\n\n      {moviesFound && <MoviesList movies={moviesFound} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["id","name","location","useLocation","className","css","to","state","from","movies","pathname","map","movie","title","fetchMoviesWithQuery","query","axios","onSubmitHandler","useSearchParams","searchParams","setSearchParams","get","useEffect","result","moviesArr","data","results","console","log","fetchMovies","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","autoComplete","autoFocus","placeholder","size","useState","moviesFound","setMoviesFound","MoviesList"],"sourceRoot":""}